#+title: Javascript structure and multi-method system

* Introduction

  This code is a tiny experiment for creation of fixed and typed
  structure in javascript, with a method dispatch system based on the
  type of the arguments. It focuses on semantic, and doesn't really
  care about syntax. This could be improved later using [[https://github.com/mozilla/sweet.js/][sweet.js]].

** Setup

*** Org-babel evalutation

    In order to run some commands, you need to run this code :

    #+begin_src emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((sh . t)))
    #+end_src


*** Unit tests

    In order to run unit tests, you will require mocha :

    #+begin_src sh
      npm install -g mocha
    #+end_src

* Objectives

  In several lisp dialects, you can see a lot of powerful structures
  created using only Lisp, and not relying originally on some Lisp
  implementation, but only on what offer the language. One of the best
  example is CLOS, the Common Lisp Object System. It creates a
  powerful object system to do object-oriented programming, even
  enforcing some type constraints if necesary, on the top of a dynamic
  language with no native constructs for object-oriented programming.

  Javascript has a lot of semantical power, but the current trend is
  using it to create new languages that compiles ot javascript. Here
  is an attempt to create a structure and method dispatch system using
  javascript semantic, expected to be used with Javascript.

** Structure definition

   The first step is to define a structure semantic that allows the
   creation of objects with a static and well-defined
   structure. Basically, a structure defines :

   - The attributes of an object
   - The type of each attribute

   Here is an example of such a structure definition :

   #+begin_src javascript :tangle no
     var Person = defstruct({
         name: {type: String},
         age: {type: Number}
     });
   #+end_src

   Then, an object using this structure could be defined like this :

   #+begin_src javascript
     var john = Person.create({
         name: "John",
         age: 35
     });
   #+end_src

   Its method can be accessed using the classic notation :

   #+begin_src javascript
     john.name; // "John"
     john.age = 36; // Effectively set
   #+end_src

   However, the type constraints are enforced :

   #+begin_src javascript
     var eddy = Person.create({
         name: "Eddy",
         age: "I don't know :-)"
     }); // Throws a type error

     john.age = null; // Throws another type error

     john.weight = 96; // Throws an error because this property does not exist
   #+end_src

** Method dispatch

   In addition with the structure definition comes a system inspired
   of Common Lisp generic functions to create a function with
   different implementation regarding the type of its arguments. It is
   a bit like function overloading in statically typed languages.

   A generic function should be define like this :

   #+begin_src javascript
     var getName = defgeneric();
   #+end_src

   Then, its implementations can be specified using =defmethod= :

   #+begin_src javascript
     getName.defmethod([Person], function (person) {
         return person.name;
     });

     getName.defmethod([String], function (s) {
         return s;
     });
   #+end_src

   =getName= can now be called either on a =Person= or a =String= :

   #+begin_src javascript
     getName(john); // "John"
     getName("Bobby"); // "Bobby"
   #+end_src

** TODO Behaviour overloading

   After these base functionnalities have been implemented, the next
   step is to create an interface so that the exact behaviour of
   =defstruct=, =defgeneric= and =defmethod= can be tuned to fit to
   the user's need. For example, new constraints could be added to a
   struct and its properties, or new way of overriding a generic
   function could be defined.

* Specification

  This forms the contract the API muspt respect. This is defined in
  term of unit tests.

  You can run this tests using this command :

  #+begin_src sh :results output
    mocha
  #+end_src

** Core functions

   Some functions will be used in many parts of the code. They are
   defined here.

   Fisrtly we have to import the core module :

   #+name: spec-core-import
   #+begin_src javascript
     var should = require("should");
     var core = require("../src/core");
   #+end_src

   The first is =hasType=, which returns =true= if a
   value =val= has the type =type=. Depending on the type of =val=,
   the kind of check may differ, and all of this must be handled by
   =hasType=.

   #+name: spec-core-has-type
   #+begin_src javascript
     describe("hasType", function () {
         it("Should guess type of base values", function () {
             var cases = [
                 ["abc", String, true],
                 ["abc", Number, false],
                 [45, Number, true],
                 [45, Object, false],
                 [45, String, false],
                 [[1, 2], Array, true],
                 [[1, 2], Object, true],
                 [[1, 2], Number, false],
                 [{a: 3}, Object, true],
                 [{a: 3}, Array, false]
             ];

             cases.forEach(function (testCase) {
                 [testCase[0], testCase[1],
                  core.hasType(testCase[0], testCase[1])].should.eql(testCase);
             });
         });

         it("Should guess type with prototype objects", function () {
             var BaseObject = {a: 3};
             var baseInstance = Object.create(BaseObject);

             core.hasType(baseInstance, BaseObject).should.be.true;
         });

         it("Should guess type with constructors", function () {
             var Constructor = function () { this.a = 3; };
             var baseInstance = new Constructor();

             core.hasType(baseInstance, Constructor).should.be.true;
         });
     });
   #+end_src

   The base cases of =hasType= can be extended to allow the creation
   of new type predicates. This functionnality must be used carefully,
   because its effects are globals.

   Using the function =defineTypePredicate=, one can create a new
   condition that will make =hasType= return =true=. This predicate
   can be removed later if necesary using =undefineTypePredicate=.

   #+name: spec-core-type-predicates
   #+begin_src javascript
     describe("defineTypePredicate", function () {
         it("Should impact hasType when a predicate is defined", function () {
             var predicate = core.defineTypePredicate(function (value, type) {
                 return value === type;
             });

             core.hasType("bla", "bla").should.be.true;

             core.undefineTypePredicate(predicate);

             core.hasType("bla", "bla").should.be.false;
         });
     });
   #+end_src

   Core tests are defined in one single place :

   #+begin_src javascript :tangle test/core.js :noweb yes
     /*jshint node: true */
     "use strict";

     <<spec-core-import>>

     describe("Core", function () {
         <<spec-core-has-type>>
         <<spec-core-type-predicates>>
     });
   #+end_src

** Structure definition

   We first have to import struct definition code and =should= module :

   #+name: spec-defstruct-import
   #+begin_src javascript
     var should = require("should");
     var defstruct = require("../src/struct").defstruct;
     var hasType = require("../src/core").hasType;
   #+end_src

   Now let's create our tests. We will use a simple structure for this
   sake.

   #+name: spec-defstruct-struct-definition
   #+begin_src javascript
     var Person = defstruct({
         name: {type: String},
         age: {type: Number}
     });
   #+end_src

   Firstly, let's check if initializing with the wrong type causes an
   exception :

   #+name: spec-defstruct-test1
   #+begin_src javascript
     it("Should throw an exception when initializers have the wrong type", function () {
         (function () {
             Person.create({
                 name: 2,
                 age: 2
             });
         }).should.throw(/Wrong type/);
     });
   #+end_src

   Then, let's try to create a normal object.

   #+name: spec-defstruct-object-creation
   #+begin_src javascript
     var john = Person.create({
         name: "John",
         age: 32
     });
   #+end_src

   The second test ensure john porperties are readable :

   #+name: spec-defstruct-test2
   #+begin_src javascript
     it("Should create readable properties and put initial values in it", function () {
         john.name.should.equal("John");
         john.age.should.equal(32);
     });
   #+end_src

   The next test make sure that we can write properties :

   #+name: spec-defstruct-test3
   #+begin_src javascript
     it("Should write in object's properties", function () {
         john.age = 25;
         john.age.should.equal(25);
         john.age = 32;
     });
   #+end_src

   However, trying to set a value that have a different type must
   throw an error.

   #+name: spec-defstruct-test4
   #+begin_src javascript
     it("Should throw an error when setting a property with a wrong type", function () {
         (function () {
             john.age = "blue";
         }).should.throw(/Wrong type/);
     });
   #+end_src

   Finally, we can check our instance has the expected type =Person=.

   #+name: spec-defstruct-test5
   #+begin_src javascript
     it("Should have struct type", function () {
         hasType(john, Person).should.be.true;
     });
   #+end_src

   The struct definition testing is grouped in a unique code :

   #+begin_src javascript :tangle test/struct.js :noweb yes
     /* jshint node: true */
     "use strict";
     <<spec-defstruct-import>>

     describe("defstruct", function () {
         <<spec-defstruct-struct-definition>>

         <<spec-defstruct-test1>>
         <<spec-defstruct-object-creation>>
         <<spec-defstruct-test2>>
         <<spec-defstruct-test3>>
         <<spec-defstruct-test4>>
         <<spec-defstruct-test5>>
     });
   #+end_src

** Method dispatch

   The method dispatch semantic is a new way for defining functions
   that can have different implementations depending on the number of
   arguments and their type.

   Firstly, let's import the required modules.

   #+name: spec-method-import
   #+begin_src javascript
     var should = require("should");
     var defgeneric = require("../src/method").defgeneric;
   #+end_src

   We will work with a single generic function, with different
   implementations. This function is a sum function that enforces the
   type of its arguments to be a number.

   #+name: spec-method-generic-definition
   #+begin_src javascript
     var add = defgeneric();

     add.defmethod([Number, Number], function (a, b) {
         return a + b;
     });

     add.defmethod([String, String], function (a, b) {
         return parseInt(a, 10) + parseInt(b, 10);
     });

     add.defmethod([String, Number], function (a, b) {
         return parseInt(a, 10) + b;
     });

     add.defmethod([Number, String], function (a, b) {
         return add(b, a);
     });
   #+end_src

   Then, we have to do a first test to check all implementations.

   #+name: spec-method-test1
   #+begin_src javascript
     it("Should use the correct implementation", function () {
         var cases = [
             [1, 2, 3],
             ["1", "2", 3],
             ["1", 2, 3],
             [1, "2", 3]
         ];

         cases.forEach(function (testCase) {
             [testCase[0], testCase[1],
              add(testCase[0], testCase[1])].should.eql(testCase);
         });
     });
   #+end_src

   We add another test to be sure an error is raised when no
   implementation is available for the provided types.

   #+name: spec-method-test2
   #+begin_src javascript
     it("Should raise an error when no implementation exists", function () {
         (function () {
             add(1, [2]);
         }).should.throw(/No implementation/);
     });
   #+end_src

   All the tests are defined in one single file =test/method.js=.

   #+begin_src javascript :tangle test/method.js :noweb yes
     /* jshint node: true */
     "use strict";

     <<spec-method-import>>

     describe("method", function () {

         <<spec-method-generic-definition>>

         <<spec-method-test1>>
         <<spec-method-test2>>
     });
   #+end_src

* Implementation

  Now that we know what we want to do, it is time to implement the
  features.


** Core

   We start by implementing utilities for other modules.

   Type predicates are the basis of the type semantic. They are
   registered in a module-local variable.

   #+name: impl-core-type-predicate-variable
   #+begin_src javascript
     var typePredicates = [];
   #+end_src

   These are defined and removed using =defineTypePredicate= and
   =removeTypePredicate=.

   #+name: impl-core-define-type-predicate
   #+begin_src javascript
     function defineTypePredicate (typePredicate) {
         typePredicates.push(typePredicate);
         return typePredicate;
     };
     exports.defineTypePredicate = defineTypePredicate;

     function undefineTypePredicate (typePredicate) {
         typePredicates.splice(typePredicates.indexOf(typePredicate), 1);
     };
     exports.undefineTypePredicate = undefineTypePredicate;
   #+end_src

   #+name: impl-core-has-type
   #+begin_src javascript
     function hasType (val, type) {
         for (var i = 0; i < typePredicates.length; i++) {
             if (typePredicates[i](val, type)) {
                 return true;
             }
         }

         return false;
     };
     exports.hasType = hasType;
   #+end_src

   Next, we define some basic type predicates.

   #+name: impl-core-base-type-predicates
   #+begin_src javascript
     defineTypePredicate(function (val, type) {
         return typeof type === "function" && val instanceof type;
     });

     defineTypePredicate(function (val, type) {
         return type.isPrototypeOf(val);
     });

     defineTypePredicate(function (val, type) {
         return typeof val === "number" && type === Number;
     });

     defineTypePredicate(function (val, type) {
         return typeof val === "string" && type === String;
     });
   #+end_src

   These utilities are grouped in a single =core.js= file.

   #+begin_src javascript :tangle src/core.js :noweb yes
     /* jshint node: true */
     "use strict";

     <<impl-core-type-predicate-variable>>
     <<impl-core-define-type-predicate>>
     <<impl-core-has-type>>
     <<impl-core-base-type-predicates>>
   #+end_src

** Structure definition

   From the outside, a structure is an object containing a constructor
   that creates objects with a pre-defined structure, and type
   constraints.

   To create object with pre-define structures, we will make use of
   prototypal inheritance. getters and setters will allow us to
   override the property assignment system to add constraints to it.

*** Structure instance creation

    We will try here to create by hand an object with a pre-defined
    structure, and with type constraints.

    We want to do a =Person= structure, with two properties :

    - =name= of type =String=
    - =age= of type =Number=

    Here is the prototype definition :

    #+begin_src javascript
      var personProto = {
          _name: "",
          _age: 0,

          get name () { return this._name; },
          set name (name) {
              if (!hasType(name, String)) {
                  throw new Error("Wrong type for name : got " + name + " but expected " +
                                  String);
              }

              this._name = name;
          }

          get age () { return this._age; },
          set age (age) {
              if (!hasType(age, Number)) {
                  throw new Error("Wrong type for age : got " + age + " but expected " +
                                  Number);
              }
              this._age = age;
          }
      };
    #+end_src

    Now we can create instance of =Person= using this prototype :

    #+begin_src javascript
      var john = Object.create(personProto);

      john.name = "John";
      john.age = "42"; // Error
    #+end_src

    This is what will be done by =defstruct=.

*** Properties creation

    Firstly, we define a function to insert a property to an object. A
    structure property is implemented as a private property that
    handles the current value, and a getter / setter property that
    handle that interaction from the outside with the property.

    #+name: impl-struct-define-property
    #+begin_src javascript
      function defineStructProperty(prototype, name, descriptor) {
          var privateName = "_" + name + ((Math.random() * 100) % 100);

          Object.defineProperty(prototype, privateName, {
              value: null,
              enumerable: false,
              writable: true
          });

          Object.defineProperty(prototype, name, {
              enumerable: true,
              get: function () { return this[privateName]; },
              set: function (newValue) {
                  if (!hasType(newValue, descriptor.type)) {
                      throw new Error("Wrong type for " + name
                                      + ": got " + newValue
                                      + " but expected " + descriptor.type);
                  }
                  this[privateName] = newValue;
              }
          });
      }
    #+end_src



*** Structure initialisation

    The structure initialisation is simple. It is simply creating an
    object based on a prototype, and populating its values according
    to the given initialisation parameters.

    #+name: impl-struct-create-instance
    #+begin_src javascript
      function createStructInstance (prototype, baseValues) {
          var instance = Object.create(prototype);

          for (var key in baseValues) {
              if (baseValues.hasOwnProperty(key)) {
                  instance[key] = baseValues[key];
              }
          }

          return instance;
      }
    #+end_src


*** Structure definition

    Finally, the code of =defstruct= simply creates a new prototype
    object using =defineStructProperty=, and creates a method that
    makes use of the prototype to instanciate the structure.

    #+name: impl-struct-defstruct
    #+begin_src javascript
      function defstruct(properties) {
          var prototype = Object.create(Object);

          for (var name in properties) {
              if (properties.hasOwnProperty(name)) {
                  defineStructProperty(prototype, name, properties[name]);
              }
          }

          Object.seal(prototype);

          return {
              get prototype () { return prototype; },
              create: function (baseValues) {
                  return createStructInstance(prototype, baseValues);
              }
          };
      }
      exports.defstruct = defstruct;
    #+end_src

*** Type predicate

    In order to make =hasType= work with structures, it is necesary to
    create a new type predicate. This one simply have to check, when
    the type is a struct, that the struct's prototype is in the
    prototype chain of the value.

    #+name: impl-struct-type-predicate
    #+begin_src javascript
      function isStruct(struct) {
          return typeof struct.prototype === "object" &&
              typeof struct.create === "function";
      }

      defineTypePredicate(function (val, type) {
          return isStruct(type) && type.prototype.isPrototypeOf(val);
      });
    #+end_src

*** Unification

    The code is grouped in a single file =struct.js=.

    #+begin_src javascript :tangle src/struct.js :noweb yes
      /* jshint node: true */
      "use strict";

      var core = require("./core");
      var hasType = core.hasType;
      var defineTypePredicate = core.defineTypePredicate;

      <<impl-struct-define-property>>
      <<impl-struct-create-instance>>
      <<impl-struct-defstruct>>
      <<impl-struct-type-predicate>>
    #+end_src
** Method dispatch

   Internally, a generic function is a javascript function that keeps
   track of that different implementations defined, and that will,
   when it is called, try to find an implementation which type
   requirements fit the current arguments.

   We have to define a predicate which tells if type requirements are
   fulfilled for some arguments, and use it in our implementation.

*** Implementations storage

    An implementation is actually a simple association between a list
    of types forming the type requirements, and a function that is the
    implementation of the generic method for these types.

    We will use a list of pairs =[types, implementation]= to represent
    it. For example :

    #+begin_src javascript
      [
          [[Number, Number], function (a, b) { return a + b; }],
          [[String, String], function (a, b) { return parseInt(a, 10) + parseInt(b, 10); }]
      ]
    #+end_src

*** Type requirements fulfillment

    Given a list of values =[a1, a2, ...]= and a list of types =[t1,
    t2, ...]=, the goal is to tell whether each =an= has the type =tn=,
    or if =tn= is unspecified (has =null= value).

    #+name: impl-method-type-req-fulfilled
    #+begin_src javascript
      function fulfillTypeRequirement (values, types) {
          for (var i = 0; i < values.length; i++) {
              var value = values[i];
              var type = types[i];

              if (type !== null && !hasType(value, type)) {
                  return false;
              }
          }

          return true;
      }
    #+end_src

    With this predicate, we can now retrieve the implementation
    corresponding to the given list of values in the implementations
    storage

    #+name: impl-method-lookup-implementation
    #+begin_src javascript
      function lookupImplementation (values, storage) {
          var candidates = storage.filter(function (candidate) {
              return fulfillTypeRequirement(values, candidate[0]);
          });

          if (candidates.length === 0) {
              return null;
          }

          return candidates[0][1];
      }
    #+end_src

**** TODO Multiple candidates

     If there is more than one candidate, we only consider the first
     one for now. This implementation does not suit cases where a value
     could have multiple types, e.g. with type inheritance.

*** Generic definition

    All tools are built now, we can implement the generic system.

    #+name: impl-method-defgeneric
    #+begin_src javascript
      var _slice = Array.prototype.slice;

      function defgeneric () {
          var storage = [];

          var func = function () {
              var values = _slice.call(arguments);
              var candidate = lookupImplementation(values, storage);

              if (candidate === null) {
                  throw new Error("No implementation of generic for values " + values);
              }

              return candidate.apply(this, values);
          };

          func.defmethod = function (types, implementation) {
              storage.push([types, implementation]);
          };

          return func;
      }
      exports.defgeneric = defgeneric;
    #+end_src

*** Unification

    All this code is implemented in one file =method.js=

    #+begin_src javascript :tangle src/method.js :noweb yes
      /*jshint node: true */
      "use strict";
      var hasType = require("./core").hasType;

      <<impl-method-type-req-fulfilled>>
      <<impl-method-lookup-implementation>>
      <<impl-method-defgeneric>>
    #+end_src
